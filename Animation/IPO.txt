Input: This code requires an input in order for it to make a graph. 

Process:The process occurs like this. You first implement your desired graph dimension into the formula  y = #*(x-#)*(x-#)+#. Than the code will graph your desired graph first using circles buy using this line of code canvas.drawEllipse (centreX: Int(x), centreY: Int(y), width: 5, height: 5). This line of code states how thick you want the individual circles to be and how high. This line also tells the computer to graph the x and y points outlined in the previous equation. The next step is to connect the dots that have been displayed on the screen so far. In order to do so we need this line of code canvas.drawLine(fromX: Int(oldx), fromY: Int(oldy), toX: Int(x), toY: Int(y), lineWidth: 5). This line states that the line will draw from the pervious position of x to the new position of x and the same goes for the yâ€™s.

Output: The output is a pretty good looking graph with grid lines going across the screen. canvas.drawLine(fromX: i * 25, fromY: 0 , toX: i * 25, toY: 500). This line of code is one of the two lines of code that draws the grid lines on the screen.

Other Info: For this project I used arrays for the first time. I did not use arrays last year so this was a new concept for me. I used arrays in my project in order to draw the grid lines. I decided to do this because is would have taken a lot of lines of code to do each individual line so it was easier to learn how to create an array. Another thing that I had to learn how to do when creating this project was how to keep track of the previous point that was drawn on the screen. I had to learn how to do this because I needed to connect the circles that I had drawn on the screen and the only way to do this was to keep track of the previous point and the most recent one and connect those two points. I also tried to create a square root grapher as well after countless attempts I was not able to compete it the way I had hoped. Overall I learned a lot in this project. 
            

